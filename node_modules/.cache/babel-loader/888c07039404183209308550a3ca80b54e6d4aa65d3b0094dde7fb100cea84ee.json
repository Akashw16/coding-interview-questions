{"ast":null,"code":"var _jsxFileName = \"E:\\\\website\\\\coding-interview-questions\\\\src\\\\components\\\\UserDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport bookmarkService from './bookmarkService';\nimport QuestionAndCodeBlock from './QuestionAndCodeBlock';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserDashboard = () => {\n  _s();\n  const [bookmarkedQuestions, setBookmarkedQuestions] = useState([]);\n  useEffect(() => {\n    const fetchBookmarkedQuestions = async () => {\n      try {\n        // Fetch the bookmarked questions IDs\n        const bookmarks = await bookmarkService.getBookmarks();\n        // Fetch the full details for each bookmarked question\n        const fullQuestions = await Promise.all(bookmarks.map(async questionId => {\n          const response = await fetch(`http://localhost:5208/api/questions/${questionId}`);\n          return response.json();\n        }));\n        setBookmarkedQuestions(fullQuestions);\n      } catch (error) {\n        console.error('Error fetching bookmarked questions:', error);\n      }\n    };\n    fetchBookmarkedQuestions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Bookmarked Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), bookmarkedQuestions.length > 0 ? bookmarkedQuestions.map(question => /*#__PURE__*/_jsxDEV(QuestionAndCodeBlock, {\n      questionId: question.id,\n      code: question.codeSnippet,\n      questionText: question.questionText\n    }, question.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No bookmarked questions found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(UserDashboard, \"d32rATL6AIkwjwUOLpM1Gu/cwms=\");\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["React","useState","useEffect","bookmarkService","QuestionAndCodeBlock","jsxDEV","_jsxDEV","UserDashboard","_s","bookmarkedQuestions","setBookmarkedQuestions","fetchBookmarkedQuestions","bookmarks","getBookmarks","fullQuestions","Promise","all","map","questionId","response","fetch","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","question","id","code","codeSnippet","questionText","_c","$RefreshReg$"],"sources":["E:/website/coding-interview-questions/src/components/UserDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport bookmarkService from './bookmarkService';\r\nimport QuestionAndCodeBlock from './QuestionAndCodeBlock';\r\n\r\nconst UserDashboard = () => {\r\n  const [bookmarkedQuestions, setBookmarkedQuestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchBookmarkedQuestions = async () => {\r\n      try {\r\n        // Fetch the bookmarked questions IDs\r\n        const bookmarks = await bookmarkService.getBookmarks();\r\n        // Fetch the full details for each bookmarked question\r\n        const fullQuestions = await Promise.all(\r\n          bookmarks.map(async (questionId) => {\r\n            const response = await fetch(`http://localhost:5208/api/questions/${questionId}`);\r\n            return response.json();\r\n          })\r\n        );\r\n        setBookmarkedQuestions(fullQuestions);\r\n      } catch (error) {\r\n        console.error('Error fetching bookmarked questions:', error);\r\n      }\r\n    };\r\n\r\n    fetchBookmarkedQuestions();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"user-dashboard\">\r\n      <h1>Your Bookmarked Questions</h1>\r\n      {bookmarkedQuestions.length > 0 ? (\r\n        bookmarkedQuestions.map((question) => (\r\n          <QuestionAndCodeBlock\r\n            key={question.id}\r\n            questionId={question.id}\r\n            code={question.codeSnippet}\r\n            questionText={question.questionText}\r\n          />\r\n        ))\r\n      ) : (\r\n        <p>No bookmarked questions found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,oBAAoB,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAElEC,SAAS,CAAC,MAAM;IACd,MAAMS,wBAAwB,GAAG,MAAAA,CAAA,KAAY;MAC3C,IAAI;QACF;QACA,MAAMC,SAAS,GAAG,MAAMT,eAAe,CAACU,YAAY,CAAC,CAAC;QACtD;QACA,MAAMC,aAAa,GAAG,MAAMC,OAAO,CAACC,GAAG,CACrCJ,SAAS,CAACK,GAAG,CAAC,MAAOC,UAAU,IAAK;UAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuCF,UAAU,EAAE,CAAC;UACjF,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;QACxB,CAAC,CACH,CAAC;QACDX,sBAAsB,CAACI,aAAa,CAAC;MACvC,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IAEDX,wBAAwB,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKkB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BnB,OAAA;MAAAmB,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjCpB,mBAAmB,CAACqB,MAAM,GAAG,CAAC,GAC7BrB,mBAAmB,CAACQ,GAAG,CAAEc,QAAQ,iBAC/BzB,OAAA,CAACF,oBAAoB;MAEnBc,UAAU,EAAEa,QAAQ,CAACC,EAAG;MACxBC,IAAI,EAAEF,QAAQ,CAACG,WAAY;MAC3BC,YAAY,EAAEJ,QAAQ,CAACI;IAAa,GAH/BJ,QAAQ,CAACC,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIjB,CACF,CAAC,gBAEFvB,OAAA;MAAAmB,QAAA,EAAG;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACrC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACrB,EAAA,CAzCID,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AA2CnB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
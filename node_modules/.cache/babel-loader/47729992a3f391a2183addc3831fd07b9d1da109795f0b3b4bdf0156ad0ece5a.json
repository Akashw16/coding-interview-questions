{"ast":null,"code":"var _jsxFileName = \"E:\\\\website\\\\coding-interview-questions\\\\src\\\\components\\\\QuestionsList.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport QuestionBlock from './QuestionBlock';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionsList = ({\n  questionsData\n}) => {\n  _s();\n  const questionRefs = useRef([]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: questionsData.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No questions available or an issue occurred while fetching data.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this) : questionsData.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: el => questionRefs.current[index] = el,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: q.questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: q.codeSnippet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(QuestionBlock, {\n        questionId: q.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), \"  \"]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionsList, \"x7Wp/HVRZS3XpO5CIgcoI3/EHuM=\");\n_c = QuestionsList;\nexport default QuestionsList;\nvar _c;\n$RefreshReg$(_c, \"QuestionsList\");","map":{"version":3,"names":["React","useRef","QuestionBlock","jsxDEV","_jsxDEV","QuestionsList","questionsData","_s","questionRefs","children","length","fileName","_jsxFileName","lineNumber","columnNumber","map","q","index","ref","el","current","questionText","codeSnippet","questionId","id","_c","$RefreshReg$"],"sources":["E:/website/coding-interview-questions/src/components/QuestionsList.js"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport QuestionBlock from './QuestionBlock';\r\n\r\nconst QuestionsList = ({ questionsData }) => {\r\n  const questionRefs = useRef([]);\r\n\r\n  return (\r\n    <div>\r\n      {questionsData.length === 0 ? (\r\n        <p>No questions available or an issue occurred while fetching data.</p>\r\n      ) : (\r\n        questionsData.map((q, index) => (\r\n          <div key={index} ref={(el) => (questionRefs.current[index] = el)}>\r\n            <h2>{q.questionText}</h2>\r\n            <pre>{q.codeSnippet}</pre>\r\n            <QuestionBlock questionId={q.id} />  {/* Pass the questionId to the QuestionBlock */}\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionsList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAMC,YAAY,GAAGP,MAAM,CAAC,EAAE,CAAC;EAE/B,oBACEG,OAAA;IAAAK,QAAA,EACGH,aAAa,CAACI,MAAM,KAAK,CAAC,gBACzBN,OAAA;MAAAK,QAAA,EAAG;IAAgE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAEvER,aAAa,CAACS,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,kBACzBb,OAAA;MAAiBc,GAAG,EAAGC,EAAE,IAAMX,YAAY,CAACY,OAAO,CAACH,KAAK,CAAC,GAAGE,EAAI;MAAAV,QAAA,gBAC/DL,OAAA;QAAAK,QAAA,EAAKO,CAAC,CAACK;MAAY;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACzBV,OAAA;QAAAK,QAAA,EAAMO,CAAC,CAACM;MAAW;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC1BV,OAAA,CAACF,aAAa;QAACqB,UAAU,EAAEP,CAAC,CAACQ;MAAG;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,MAAE;IAAA,GAH7BG,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIV,CACN;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACP,EAAA,CAlBIF,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AAoBnB,eAAeA,aAAa;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"E:\\\\website\\\\coding-interview-questions\\\\src\\\\components\\\\QuestionAndCodeBlock.js\";\nimport React from 'react';\nimport './QuestionsList.css';\nimport copyIcon from '../assets/copy-icon-size_24.png';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionAndCodeBlock = ({\n  questionId,\n  code\n}) => {\n  const handleBookmark = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert(\"You need to be logged in to bookmark questions.\");\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:5208/api/bookmarks/${questionId}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        alert(\"Question bookmarked successfully!\");\n      } else {\n        const errorData = await response.json();\n        alert(`Failed to bookmark the question: ${errorData.message || response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error bookmarking question:', error);\n      alert(\"An error occurred while bookmarking the question.\");\n    }\n  };\n\n  // Function to copy the code to clipboard\n  const copyToClipboard = () => {\n    if (code) {\n      navigator.clipboard.writeText(code);\n      alert('Code copied to clipboard!');\n    } else {\n      alert('No code available to copy!');\n    }\n  };\n\n  // Function to wrap comments in a span with a specific class for styling\n  const formatCodeWithComments = code => {\n    if (!code) return ''; // Return an empty string if code is undefined or null\n\n    // Regular expression to find comment lines starting with //\n    const commentRegex = /(\\/\\/.*$)/gm;\n\n    // Replace comments with HTML formatted span tags\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-and-code-block\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-block-container slide-in\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-block fade-in\",\n        children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            dangerouslySetInnerHTML: {\n              __html: formatCodeWithComments(code)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"copy-button\",\n          onClick: copyToClipboard,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: copyIcon,\n            alt: \"Copy\",\n            className: \"copy-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBookmark,\n      children: \"Bookmark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_c = QuestionAndCodeBlock;\nexport default QuestionAndCodeBlock;\nvar _c;\n$RefreshReg$(_c, \"QuestionAndCodeBlock\");","map":{"version":3,"names":["React","copyIcon","axios","jsxDEV","_jsxDEV","QuestionAndCodeBlock","questionId","code","handleBookmark","token","localStorage","getItem","alert","response","fetch","method","headers","ok","errorData","json","message","statusText","error","console","copyToClipboard","navigator","clipboard","writeText","formatCodeWithComments","commentRegex","replace","className","children","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["E:/website/coding-interview-questions/src/components/QuestionAndCodeBlock.js"],"sourcesContent":["import React from 'react';\r\nimport './QuestionsList.css';\r\nimport copyIcon from '../assets/copy-icon-size_24.png'; \r\nimport axios from 'axios';\r\n\r\nconst QuestionAndCodeBlock = ({ questionId, code }) => {\r\n\r\n  const handleBookmark = async () => {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!token) {\r\n      alert(\"You need to be logged in to bookmark questions.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5208/api/bookmarks/${questionId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(\"Question bookmarked successfully!\");\r\n      } else {\r\n        const errorData = await response.json();\r\n        alert(`Failed to bookmark the question: ${errorData.message || response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error bookmarking question:', error);\r\n      alert(\"An error occurred while bookmarking the question.\");\r\n    }\r\n  };\r\n\r\n  // Function to copy the code to clipboard\r\n  const copyToClipboard = () => {\r\n    if (code) {\r\n      navigator.clipboard.writeText(code);\r\n      alert('Code copied to clipboard!');\r\n    } else {\r\n      alert('No code available to copy!');\r\n    }\r\n  };\r\n\r\n  // Function to wrap comments in a span with a specific class for styling\r\n  const formatCodeWithComments = (code) => {\r\n    if (!code) return '';  // Return an empty string if code is undefined or null\r\n    \r\n    // Regular expression to find comment lines starting with //\r\n    const commentRegex = /(\\/\\/.*$)/gm;\r\n    \r\n    // Replace comments with HTML formatted span tags\r\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-and-code-block\">\r\n      <div className=\"code-block-container slide-in\">\r\n        <div className=\"code-block fade-in\">\r\n          <pre>\r\n            {/* Use dangerouslySetInnerHTML to render the code with HTML formatting */}\r\n            <code dangerouslySetInnerHTML={{ __html: formatCodeWithComments(code) }} />\r\n          </pre>\r\n          <button className=\"copy-button\" onClick={copyToClipboard}>\r\n            <img src={copyIcon} alt=\"Copy\" className=\"copy-icon\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <button onClick={handleBookmark}>Bookmark</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionAndCodeBlock;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\nconst bookmarkService = {\n  getBookmarks: async userId => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found in localStorage');\n      return [];\n    }\n    try {\n      const response = await axios.get(`http://localhost:5208/api/bookmarks/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data; // Ensure this returns an array of question IDs\n    } catch (error) {\n      console.error('Error fetching bookmarks:', error);\n      throw error;\n    }\n  },\n  addBookmark: async bookmarkRequest => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found in localStorage');\n      return;\n    }\n    try {\n      const response = await axios.post('http://localhost:5208/api/bookmarks/add', bookmarkRequest, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error adding bookmark:', error);\n      throw error;\n    }\n  },\n  removeBookmark: async bookmarkRequest => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found in localStorage');\n      return;\n    }\n    try {\n      const response = await axios.post('http://localhost:5208/api/bookmarks/remove', bookmarkRequest, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error removing bookmark:', error);\n      throw error;\n    }\n  }\n};\nexport default bookmarkService;","map":{"version":3,"names":["axios","bookmarkService","getBookmarks","userId","token","localStorage","getItem","console","error","response","get","headers","data","addBookmark","bookmarkRequest","post","removeBookmark"],"sources":["E:/website/coding-interview-questions/src/components/bookmarkService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst bookmarkService = {\r\n  getBookmarks: async (userId) => {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!token) {\r\n      console.error('No token found in localStorage');\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(`http://localhost:5208/api/bookmarks/${userId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n        }\r\n      });\r\n      return response.data; // Ensure this returns an array of question IDs\r\n    } catch (error) {\r\n      console.error('Error fetching bookmarks:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  addBookmark: async (bookmarkRequest) => {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!token) {\r\n      console.error('No token found in localStorage');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5208/api/bookmarks/add', bookmarkRequest, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error adding bookmark:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  removeBookmark: async (bookmarkRequest) => {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!token) {\r\n      console.error('No token found in localStorage');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5208/api/bookmarks/remove', bookmarkRequest, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error removing bookmark:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default bookmarkService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,eAAe,GAAG;EACtBC,YAAY,EAAE,MAAOC,MAAM,IAAK;IAC9B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAI,CAACF,KAAK,EAAE;MACVG,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/C,OAAO,EAAE;IACX;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,uCAAuCP,MAAM,EAAE,EAAE;QAChFQ,OAAO,EAAE;UACP,eAAe,EAAE,UAAUP,KAAK;QAClC;MACF,CAAC,CAAC;MACF,OAAOK,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDK,WAAW,EAAE,MAAOC,eAAe,IAAK;IACtC,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAI,CAACF,KAAK,EAAE;MACVG,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/C;IACF;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACe,IAAI,CAAC,yCAAyC,EAAED,eAAe,EAAE;QAC5FH,OAAO,EAAE;UACP,eAAe,EAAE,UAAUP,KAAK,EAAE;UAClC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAOK,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDQ,cAAc,EAAE,MAAOF,eAAe,IAAK;IACzC,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAI,CAACF,KAAK,EAAE;MACVG,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/C;IACF;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACe,IAAI,CAAC,4CAA4C,EAAED,eAAe,EAAE;QAC/FH,OAAO,EAAE;UACP,eAAe,EAAE,UAAUP,KAAK,EAAE;UAClC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAOK,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeP,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
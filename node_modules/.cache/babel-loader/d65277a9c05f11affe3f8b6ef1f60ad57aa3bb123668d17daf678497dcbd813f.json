{"ast":null,"code":"var _jsxFileName = \"E:\\\\website\\\\coding-interview-questions\\\\src\\\\components\\\\QuestionsList.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport QuestionAndCodeBlock from './QuestionAndBlock';\nimport '../styles/QuestionsList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionsList = ({\n  questionsData\n}) => {\n  _s();\n  const questionRefs = useRef([]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: questionsData.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No questions available or an issue occurred while fetching data.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this) : questionsData.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: el => questionRefs.current[index] = el,\n      className: \"question-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question-title\",\n        children: q.questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-block-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"code-block\",\n          children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n            dangerouslySetInnerHTML: {\n              __html: formatCodeWithComments(q.codeSnippet)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"copy-button\",\n            onClick: () => copyToClipboard(q.codeSnippet),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/path-to-your-copy-icon.png\",\n              alt: \"Copy\",\n              className: \"copy-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionsList, \"x7Wp/HVRZS3XpO5CIgcoI3/EHuM=\");\n_c = QuestionsList;\nconst formatCodeWithComments = code => {\n  // Regular expression to find comment lines starting with //\n  const commentRegex = /(\\/\\/.*$)/gm;\n  return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\n};\nconst copyToClipboard = code => {\n  navigator.clipboard.writeText(code);\n  alert('Code copied to clipboard!');\n};\nexport default QuestionsList;\nvar _c;\n$RefreshReg$(_c, \"QuestionsList\");","map":{"version":3,"names":["React","useRef","QuestionAndCodeBlock","jsxDEV","_jsxDEV","QuestionsList","questionsData","_s","questionRefs","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","map","q","index","ref","el","current","questionText","dangerouslySetInnerHTML","__html","formatCodeWithComments","codeSnippet","onClick","copyToClipboard","src","alt","_c","code","commentRegex","replace","navigator","clipboard","writeText","alert","$RefreshReg$"],"sources":["E:/website/coding-interview-questions/src/components/QuestionsList.js"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport QuestionAndCodeBlock from './QuestionAndBlock';\r\nimport '../styles/QuestionsList.css';\r\n\r\n\r\nconst QuestionsList = ({ questionsData }) => {\r\n  const questionRefs = useRef([]);\r\n\r\n  return (\r\n    <div className=\"questions-container\">\r\n      {questionsData.length === 0 ? (\r\n        <p>No questions available or an issue occurred while fetching data.</p>\r\n      ) : (\r\n        questionsData.map((q, index) => (\r\n          <div key={index} ref={(el) => (questionRefs.current[index] = el)} className=\"question-item\">\r\n            <h2 className=\"question-title\">{q.questionText}</h2>\r\n            <div className=\"code-block-container\">\r\n              <div className=\"code-block\">\r\n                <pre dangerouslySetInnerHTML={{ __html: formatCodeWithComments(q.codeSnippet) }} />\r\n                <button className=\"copy-button\" onClick={() => copyToClipboard(q.codeSnippet)}>\r\n                  <img src=\"/path-to-your-copy-icon.png\" alt=\"Copy\" className=\"copy-icon\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst formatCodeWithComments = (code) => {\r\n  // Regular expression to find comment lines starting with //\r\n  const commentRegex = /(\\/\\/.*$)/gm;\r\n  return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\r\n};\r\n\r\nconst copyToClipboard = (code) => {\r\n  navigator.clipboard.writeText(code);\r\n  alert('Code copied to clipboard!');\r\n};\r\n\r\nexport default QuestionsList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,oBAAoB,MAAM,oBAAoB;AACrD,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGrC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAMC,YAAY,GAAGP,MAAM,CAAC,EAAE,CAAC;EAE/B,oBACEG,OAAA;IAAKK,SAAS,EAAC,qBAAqB;IAAAC,QAAA,EACjCJ,aAAa,CAACK,MAAM,KAAK,CAAC,gBACzBP,OAAA;MAAAM,QAAA,EAAG;IAAgE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAEvET,aAAa,CAACU,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,kBACzBd,OAAA;MAAiBe,GAAG,EAAGC,EAAE,IAAMZ,YAAY,CAACa,OAAO,CAACH,KAAK,CAAC,GAAGE,EAAI;MAACX,SAAS,EAAC,eAAe;MAAAC,QAAA,gBACzFN,OAAA;QAAIK,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAEO,CAAC,CAACK;MAAY;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpDX,OAAA;QAAKK,SAAS,EAAC,sBAAsB;QAAAC,QAAA,eACnCN,OAAA;UAAKK,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzBN,OAAA;YAAKmB,uBAAuB,EAAE;cAAEC,MAAM,EAAEC,sBAAsB,CAACR,CAAC,CAACS,WAAW;YAAE;UAAE;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACnFX,OAAA;YAAQK,SAAS,EAAC,aAAa;YAACkB,OAAO,EAAEA,CAAA,KAAMC,eAAe,CAACX,CAAC,CAACS,WAAW,CAAE;YAAAhB,QAAA,eAC5EN,OAAA;cAAKyB,GAAG,EAAC,6BAA6B;cAACC,GAAG,EAAC,MAAM;cAACrB,SAAS,EAAC;YAAW;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA,GATEG,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUV,CACN;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACR,EAAA,CAxBIF,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AA0BnB,MAAMoB,sBAAsB,GAAIO,IAAI,IAAK;EACvC;EACA,MAAMC,YAAY,GAAG,aAAa;EAClC,OAAOD,IAAI,CAACE,OAAO,CAACD,YAAY,EAAE,sCAAsC,CAAC;AAC3E,CAAC;AAED,MAAML,eAAe,GAAII,IAAI,IAAK;EAChCG,SAAS,CAACC,SAAS,CAACC,SAAS,CAACL,IAAI,CAAC;EACnCM,KAAK,CAAC,2BAA2B,CAAC;AACpC,CAAC;AAED,eAAejC,aAAa;AAAC,IAAA0B,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
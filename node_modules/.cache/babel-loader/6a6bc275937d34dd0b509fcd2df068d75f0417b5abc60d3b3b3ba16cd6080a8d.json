{"ast":null,"code":"var _jsxFileName = \"E:\\\\website\\\\coding-interview-questions\\\\src\\\\components\\\\QuestionBlock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Tabs from './Tabs';\nimport CodeBlock from './CodeBlock';\nimport { addBookmark, removeBookmark, fetchUserBookmarks } from './bookmarkApi';\nimport jwtDecode from 'jwt-decode'; // Correct import for jwt-decode\nimport '../styles/QuestionBlock.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionBlock = ({\n  question,\n  code\n}) => {\n  _s();\n  const [bookmarked, setBookmarked] = useState(false);\n  useEffect(() => {\n    const loadBookmarks = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) return; // No token, user not logged in\n\n        const decodedToken = jwtDecode(token);\n        const userId = decodedToken.userId; // Ensure your token has this\n\n        // Fetch user bookmarks to check if this question is bookmarked\n        const bookmarks = await fetchUserBookmarks(userId);\n        setBookmarked(bookmarks.some(b => b.questionId === question.id));\n      } catch (error) {\n        console.error('Error fetching bookmarks:', error);\n      }\n    };\n    loadBookmarks();\n  }, [question.id]);\n  const handleBookmark = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) throw new Error(\"User is not logged in\");\n      const decodedToken = jwtDecode(token);\n      const userId = decodedToken.userId;\n      if (bookmarked) {\n        // Remove bookmark\n        await removeBookmark(userId, question.id);\n        setBookmarked(false);\n      } else {\n        // Add bookmark\n        const bookmarkRequest = {\n          userId,\n          questionId: question.id\n        };\n        await addBookmark(bookmarkRequest);\n        setBookmarked(true);\n      }\n    } catch (error) {\n      console.error('Error updating bookmark:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-block\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: question.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      languages: ['C', 'C++', 'Java', 'Python'],\n      onTabClick: () => {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CodeBlock, {\n      code: code\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bookmark-button\",\n      onClick: handleBookmark,\n      children: bookmarked ? 'Unbookmark' : 'Bookmark'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionBlock, \"cgfO4QFgT+YKaEUM6gxq7mPRzac=\");\n_c = QuestionBlock;\nexport default QuestionBlock;\nvar _c;\n$RefreshReg$(_c, \"QuestionBlock\");","map":{"version":3,"names":["React","useState","useEffect","Tabs","CodeBlock","addBookmark","removeBookmark","fetchUserBookmarks","jwtDecode","jsxDEV","_jsxDEV","QuestionBlock","question","code","_s","bookmarked","setBookmarked","loadBookmarks","token","localStorage","getItem","decodedToken","userId","bookmarks","some","b","questionId","id","error","console","handleBookmark","Error","bookmarkRequest","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","languages","onTabClick","onClick","_c","$RefreshReg$"],"sources":["E:/website/coding-interview-questions/src/components/QuestionBlock.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Tabs from './Tabs';\r\nimport CodeBlock from './CodeBlock';\r\nimport { addBookmark, removeBookmark, fetchUserBookmarks } from './bookmarkApi';\r\nimport jwtDecode from 'jwt-decode'; // Correct import for jwt-decode\r\nimport '../styles/QuestionBlock.css';\r\n\r\nconst QuestionBlock = ({ question, code }) => {\r\n  const [bookmarked, setBookmarked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const loadBookmarks = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) return; // No token, user not logged in\r\n\r\n        const decodedToken = jwtDecode(token);\r\n        const userId = decodedToken.userId; // Ensure your token has this\r\n\r\n        // Fetch user bookmarks to check if this question is bookmarked\r\n        const bookmarks = await fetchUserBookmarks(userId);\r\n        setBookmarked(bookmarks.some(b => b.questionId === question.id));\r\n      } catch (error) {\r\n        console.error('Error fetching bookmarks:', error);\r\n      }\r\n    };\r\n\r\n    loadBookmarks();\r\n  }, [question.id]);\r\n\r\n  const handleBookmark = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) throw new Error(\"User is not logged in\");\r\n\r\n      const decodedToken = jwtDecode(token);\r\n      const userId = decodedToken.userId;\r\n\r\n      if (bookmarked) {\r\n        // Remove bookmark\r\n        await removeBookmark(userId, question.id);\r\n        setBookmarked(false);\r\n      } else {\r\n        // Add bookmark\r\n        const bookmarkRequest = { userId, questionId: question.id };\r\n        await addBookmark(bookmarkRequest);\r\n        setBookmarked(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating bookmark:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-block\">\r\n      <h2>{question.title}</h2>\r\n      <Tabs languages={['C', 'C++', 'Java', 'Python']} onTabClick={() => {}} />\r\n      <CodeBlock code={code} />\r\n      <button className=\"bookmark-button\" onClick={handleBookmark}>\r\n        {bookmarked ? 'Unbookmark' : 'Bookmark'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionBlock;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
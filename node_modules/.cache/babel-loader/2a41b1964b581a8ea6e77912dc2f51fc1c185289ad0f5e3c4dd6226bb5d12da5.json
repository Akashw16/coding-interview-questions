{"ast":null,"code":"var _jsxFileName = \"E:\\\\website\\\\coding-interview-questions\\\\src\\\\components\\\\QuestionAndCodeBlock.js\";\nimport React from 'react';\nimport '../styles/QuestionsList.css';\nimport copyIcon from '../assets/copy-icon-size_24.png';\nimport bookmarkService from './bookmarkService.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionAndCodeBlock = ({\n  questionId,\n  code\n}) => {\n  const handleBookmark = async () => {\n    try {\n      const response = await bookmarkService.addBookmark({\n        questionId\n      });\n      if (response) {\n        alert(\"Question bookmarked successfully!\");\n      }\n    } catch (error) {\n      alert(\"An error occurred while bookmarking the question.\");\n    }\n  };\n  const copyToClipboard = () => {\n    if (code) {\n      navigator.clipboard.writeText(code);\n      alert('Code copied to clipboard!');\n    } else {\n      alert('No code available to copy!');\n    }\n  };\n  const formatCodeWithComments = code => {\n    if (!code) return ''; // Return an empty string if code is undefined or null\n    const commentRegex = /(\\/\\/.*$)/gm;\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-and-code-block\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-block-container slide-in\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-block fade-in\",\n        children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            dangerouslySetInnerHTML: {\n              __html: formatCodeWithComments(code)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"copy-button\",\n          onClick: copyToClipboard,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: copyIcon,\n            alt: \"Copy\",\n            className: \"copy-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBookmark,\n      children: \"Bookmark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_c = QuestionAndCodeBlock;\nexport default QuestionAndCodeBlock;\nvar _c;\n$RefreshReg$(_c, \"QuestionAndCodeBlock\");","map":{"version":3,"names":["React","copyIcon","bookmarkService","jsxDEV","_jsxDEV","QuestionAndCodeBlock","questionId","code","handleBookmark","response","addBookmark","alert","error","copyToClipboard","navigator","clipboard","writeText","formatCodeWithComments","commentRegex","replace","className","children","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["E:/website/coding-interview-questions/src/components/QuestionAndCodeBlock.js"],"sourcesContent":["import React from 'react';\r\nimport '../styles/QuestionsList.css';\r\nimport copyIcon from '../assets/copy-icon-size_24.png'; \r\nimport bookmarkService from './bookmarkService.js';\r\n\r\nconst QuestionAndCodeBlock = ({ questionId, code }) => {\r\n\r\n  const handleBookmark = async () => {\r\n    try {\r\n      const response = await bookmarkService.addBookmark({ questionId });\r\n      if (response) {\r\n        alert(\"Question bookmarked successfully!\");\r\n      }\r\n    } catch (error) {\r\n      alert(\"An error occurred while bookmarking the question.\");\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = () => {\r\n    if (code) {\r\n      navigator.clipboard.writeText(code);\r\n      alert('Code copied to clipboard!');\r\n    } else {\r\n      alert('No code available to copy!');\r\n    }\r\n  };\r\n\r\n  const formatCodeWithComments = (code) => {\r\n    if (!code) return '';  // Return an empty string if code is undefined or null\r\n    const commentRegex = /(\\/\\/.*$)/gm;\r\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-and-code-block\">\r\n      <div className=\"code-block-container slide-in\">\r\n        <div className=\"code-block fade-in\">\r\n          <pre>\r\n            <code dangerouslySetInnerHTML={{ __html: formatCodeWithComments(code) }} />\r\n          </pre>\r\n          <button className=\"copy-button\" onClick={copyToClipboard}>\r\n            <img src={copyIcon} alt=\"Copy\" className=\"copy-icon\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <button onClick={handleBookmark}>Bookmark</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionAndCodeBlock;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,6BAA6B;AACpC,OAAOC,QAAQ,MAAM,iCAAiC;AACtD,OAAOC,eAAe,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAK,CAAC,KAAK;EAErD,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,eAAe,CAACQ,WAAW,CAAC;QAAEJ;MAAW,CAAC,CAAC;MAClE,IAAIG,QAAQ,EAAE;QACZE,KAAK,CAAC,mCAAmC,CAAC;MAC5C;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdD,KAAK,CAAC,mDAAmD,CAAC;IAC5D;EACF,CAAC;EAED,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIN,IAAI,EAAE;MACRO,SAAS,CAACC,SAAS,CAACC,SAAS,CAACT,IAAI,CAAC;MACnCI,KAAK,CAAC,2BAA2B,CAAC;IACpC,CAAC,MAAM;MACLA,KAAK,CAAC,4BAA4B,CAAC;IACrC;EACF,CAAC;EAED,MAAMM,sBAAsB,GAAIV,IAAI,IAAK;IACvC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE,CAAC,CAAE;IACvB,MAAMW,YAAY,GAAG,aAAa;IAClC,OAAOX,IAAI,CAACY,OAAO,CAACD,YAAY,EAAE,sCAAsC,CAAC;EAC3E,CAAC;EAED,oBACEd,OAAA;IAAKgB,SAAS,EAAC,yBAAyB;IAAAC,QAAA,gBACtCjB,OAAA;MAAKgB,SAAS,EAAC,+BAA+B;MAAAC,QAAA,eAC5CjB,OAAA;QAAKgB,SAAS,EAAC,oBAAoB;QAAAC,QAAA,gBACjCjB,OAAA;UAAAiB,QAAA,eACEjB,OAAA;YAAMkB,uBAAuB,EAAE;cAAEC,MAAM,EAAEN,sBAAsB,CAACV,IAAI;YAAE;UAAE;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxE,CAAC,eACNvB,OAAA;UAAQgB,SAAS,EAAC,aAAa;UAACQ,OAAO,EAAEf,eAAgB;UAAAQ,QAAA,eACvDjB,OAAA;YAAKyB,GAAG,EAAE5B,QAAS;YAAC6B,GAAG,EAAC,MAAM;YAACV,SAAS,EAAC;UAAW;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNvB,OAAA;MAAQwB,OAAO,EAAEpB,cAAe;MAAAa,QAAA,EAAC;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV,CAAC;AAACI,EAAA,GA3CI1B,oBAAoB;AA6C1B,eAAeA,oBAAoB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"E:\\\\website\\\\coding-interview-questions\\\\src\\\\components\\\\QuestionAndCodeBlock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport copyIcon from '../assets/copy-icon-size_24.png';\nimport bookmarkService from './bookmarkService.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionAndCodeBlock = ({\n  questionId,\n  code\n}) => {\n  _s();\n  const [isBookmarked, setIsBookmarked] = useState(false);\n  const [isFetching, setIsFetching] = useState(true); // New state to track if bookmark status is being fetched\n\n  useEffect(() => {\n    const fetchBookmarkStatus = async () => {\n      try {\n        setIsFetching(true); // Start fetching\n        const bookmarks = await bookmarkService.getBookmarks();\n        if (bookmarks && bookmarks.length > 0) {\n          const isCurrentlyBookmarked = bookmarks.includes(questionId);\n          setIsBookmarked(isCurrentlyBookmarked);\n        }\n      } catch (error) {\n        console.error('Error fetching bookmark status:', error);\n      } finally {\n        setIsFetching(false); // End fetching\n      }\n    };\n    fetchBookmarkStatus();\n  }, [questionId]);\n  const handleBookmark = async () => {\n    try {\n      if (isBookmarked) {\n        await bookmarkService.removeBookmark({\n          questionId\n        });\n        setIsBookmarked(false);\n        alert(\"Bookmark removed successfully!\");\n      } else {\n        await bookmarkService.addBookmark({\n          questionId\n        });\n        setIsBookmarked(true);\n        alert(\"Question bookmarked successfully!\");\n      }\n    } catch (error) {\n      console.error(\"Error during bookmarking:\", error);\n      alert(\"An error occurred while updating the bookmark status.\");\n    }\n  };\n  const copyToClipboard = () => {\n    if (code) {\n      navigator.clipboard.writeText(code);\n      alert('Code copied to clipboard!');\n    } else {\n      alert('No code available to copy!');\n    }\n  };\n  const formatCodeWithComments = code => {\n    if (!code) return '';\n    const commentRegex = /(\\/\\/.*$)/gm;\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\n  };\n\n  // Prevent render until bookmark status has been fetched\n  if (isFetching) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-and-code-block\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-block-container slide-in\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-block fade-in\",\n        children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            dangerouslySetInnerHTML: {\n              __html: formatCodeWithComments(code)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"copy-button\",\n          onClick: copyToClipboard,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: copyIcon,\n            alt: \"Copy\",\n            className: \"copy-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBookmark,\n      children: isBookmarked ? 'Unbookmark' : 'Bookmark'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionAndCodeBlock, \"+mPxjKhFs4EnlaFWuAPinDyf2fY=\");\n_c = QuestionAndCodeBlock;\nexport default QuestionAndCodeBlock;\nvar _c;\n$RefreshReg$(_c, \"QuestionAndCodeBlock\");","map":{"version":3,"names":["React","useState","useEffect","copyIcon","bookmarkService","jsxDEV","_jsxDEV","QuestionAndCodeBlock","questionId","code","_s","isBookmarked","setIsBookmarked","isFetching","setIsFetching","fetchBookmarkStatus","bookmarks","getBookmarks","length","isCurrentlyBookmarked","includes","error","console","handleBookmark","removeBookmark","alert","addBookmark","copyToClipboard","navigator","clipboard","writeText","formatCodeWithComments","commentRegex","replace","children","fileName","_jsxFileName","lineNumber","columnNumber","className","dangerouslySetInnerHTML","__html","onClick","src","alt","_c","$RefreshReg$"],"sources":["E:/website/coding-interview-questions/src/components/QuestionAndCodeBlock.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport copyIcon from '../assets/copy-icon-size_24.png'; \r\nimport bookmarkService from './bookmarkService.js';\r\n\r\nconst QuestionAndCodeBlock = ({ questionId, code }) => {\r\n  const [isBookmarked, setIsBookmarked] = useState(false);\r\n  const [isFetching, setIsFetching] = useState(true);  // New state to track if bookmark status is being fetched\r\n\r\n  useEffect(() => {\r\n    const fetchBookmarkStatus = async () => {\r\n      try {\r\n        setIsFetching(true);  // Start fetching\r\n        const bookmarks = await bookmarkService.getBookmarks();\r\n        if (bookmarks && bookmarks.length > 0) {\r\n          const isCurrentlyBookmarked = bookmarks.includes(questionId);\r\n          setIsBookmarked(isCurrentlyBookmarked);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching bookmark status:', error);\r\n      } finally {\r\n        setIsFetching(false);  // End fetching\r\n      }\r\n    };\r\n\r\n    fetchBookmarkStatus();\r\n  }, [questionId]);\r\n\r\n  const handleBookmark = async () => {\r\n    try {\r\n      if (isBookmarked) {\r\n        await bookmarkService.removeBookmark({ questionId });\r\n        setIsBookmarked(false);\r\n        alert(\"Bookmark removed successfully!\");\r\n      } else {\r\n        await bookmarkService.addBookmark({ questionId });\r\n        setIsBookmarked(true);\r\n        alert(\"Question bookmarked successfully!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during bookmarking:\", error);\r\n      alert(\"An error occurred while updating the bookmark status.\");\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = () => {\r\n    if (code) {\r\n      navigator.clipboard.writeText(code);\r\n      alert('Code copied to clipboard!');\r\n    } else {\r\n      alert('No code available to copy!');\r\n    }\r\n  };\r\n\r\n  const formatCodeWithComments = (code) => {\r\n    if (!code) return '';  \r\n    const commentRegex = /(\\/\\/.*$)/gm;\r\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\r\n  };\r\n\r\n  // Prevent render until bookmark status has been fetched\r\n  if (isFetching) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"question-and-code-block\">\r\n      <div className=\"code-block-container slide-in\">\r\n        <div className=\"code-block fade-in\">\r\n          <pre>\r\n            <code dangerouslySetInnerHTML={{ __html: formatCodeWithComments(code) }} />\r\n          </pre>\r\n          <button className=\"copy-button\" onClick={copyToClipboard}>\r\n            <img src={copyIcon} alt=\"Copy\" className=\"copy-icon\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <button onClick={handleBookmark}>\r\n        {isBookmarked ? 'Unbookmark' : 'Bookmark'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionAndCodeBlock;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
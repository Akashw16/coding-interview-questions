{"ast":null,"code":"var _jsxFileName = \"E:\\\\website\\\\coding-interview-questions\\\\src\\\\components\\\\QuestionAndCodeBlock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport copyIcon from '../assets/copy-icon-size_24.png';\nimport bookmarkService from './bookmarkService.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionAndCodeBlock = ({\n  questionId,\n  code\n}) => {\n  _s();\n  const [isBookmarked, setIsBookmarked] = useState(false);\n  const [initialFetchDone, setInitialFetchDone] = useState(false); // Track initial fetch status\n\n  useEffect(() => {\n    const fetchBookmarkStatus = async () => {\n      try {\n        if (!initialFetchDone) {\n          const bookmarks = await bookmarkService.getBookmarks();\n          if (bookmarks && bookmarks.includes(questionId)) {\n            setIsBookmarked(true);\n          }\n          setInitialFetchDone(true); // Mark that the initial fetch is done\n        }\n      } catch (error) {\n        console.error('Error fetching bookmark status:', error);\n      }\n    };\n    fetchBookmarkStatus();\n  }, [questionId, initialFetchDone]);\n  const handleBookmark = async () => {\n    try {\n      if (isBookmarked) {\n        await bookmarkService.removeBookmark({\n          questionId\n        });\n        setIsBookmarked(false);\n        alert(\"Bookmark removed successfully!\");\n      } else {\n        await bookmarkService.addBookmark({\n          questionId\n        });\n        setIsBookmarked(true);\n        alert(\"Question bookmarked successfully!\");\n      }\n    } catch (error) {\n      console.error(\"Error during bookmarking:\", error);\n      alert(\"An error occurred while updating the bookmark status.\");\n    }\n  };\n  const copyToClipboard = () => {\n    if (code) {\n      navigator.clipboard.writeText(code);\n      alert('Code copied to clipboard!');\n    } else {\n      alert('No code available to copy!');\n    }\n  };\n  const formatCodeWithComments = code => {\n    if (!code) return '';\n    const commentRegex = /(\\/\\/.*$)/gm;\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-and-code-block\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-block-container slide-in\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-block fade-in\",\n        children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            dangerouslySetInnerHTML: {\n              __html: formatCodeWithComments(code)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"copy-button\",\n          onClick: copyToClipboard,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: copyIcon,\n            alt: \"Copy\",\n            className: \"copy-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBookmark,\n      children: isBookmarked ? 'Unbookmark' : 'Bookmark'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionAndCodeBlock, \"+hZ6Sd6dB/87AWrFiYzZX3jpZ4Y=\");\n_c = QuestionAndCodeBlock;\nexport default QuestionAndCodeBlock;\nvar _c;\n$RefreshReg$(_c, \"QuestionAndCodeBlock\");","map":{"version":3,"names":["React","useState","useEffect","copyIcon","bookmarkService","jsxDEV","_jsxDEV","QuestionAndCodeBlock","questionId","code","_s","isBookmarked","setIsBookmarked","initialFetchDone","setInitialFetchDone","fetchBookmarkStatus","bookmarks","getBookmarks","includes","error","console","handleBookmark","removeBookmark","alert","addBookmark","copyToClipboard","navigator","clipboard","writeText","formatCodeWithComments","commentRegex","replace","className","children","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["E:/website/coding-interview-questions/src/components/QuestionAndCodeBlock.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport copyIcon from '../assets/copy-icon-size_24.png'; \r\nimport bookmarkService from './bookmarkService.js';\r\n\r\nconst QuestionAndCodeBlock = ({ questionId, code }) => {\r\n  const [isBookmarked, setIsBookmarked] = useState(false);\r\n  const [initialFetchDone, setInitialFetchDone] = useState(false);  // Track initial fetch status\r\n\r\n  useEffect(() => {\r\n    const fetchBookmarkStatus = async () => {\r\n      try {\r\n        if (!initialFetchDone) {\r\n          const bookmarks = await bookmarkService.getBookmarks();\r\n          if (bookmarks && bookmarks.includes(questionId)) {\r\n            setIsBookmarked(true);\r\n          }\r\n          setInitialFetchDone(true);  // Mark that the initial fetch is done\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching bookmark status:', error);\r\n      }\r\n    };\r\n\r\n    fetchBookmarkStatus();\r\n  }, [questionId, initialFetchDone]);\r\n\r\n  const handleBookmark = async () => {\r\n    try {\r\n      if (isBookmarked) {\r\n        await bookmarkService.removeBookmark({ questionId });\r\n        setIsBookmarked(false);\r\n        alert(\"Bookmark removed successfully!\");\r\n      } else {\r\n        await bookmarkService.addBookmark({ questionId });\r\n        setIsBookmarked(true);\r\n        alert(\"Question bookmarked successfully!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during bookmarking:\", error);\r\n      alert(\"An error occurred while updating the bookmark status.\");\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = () => {\r\n    if (code) {\r\n      navigator.clipboard.writeText(code);\r\n      alert('Code copied to clipboard!');\r\n    } else {\r\n      alert('No code available to copy!');\r\n    }\r\n  };\r\n\r\n  const formatCodeWithComments = (code) => {\r\n    if (!code) return '';  \r\n    const commentRegex = /(\\/\\/.*$)/gm;\r\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-and-code-block\">\r\n      <div className=\"code-block-container slide-in\">\r\n        <div className=\"code-block fade-in\">\r\n          <pre>\r\n            <code dangerouslySetInnerHTML={{ __html: formatCodeWithComments(code) }} />\r\n          </pre>\r\n          <button className=\"copy-button\" onClick={copyToClipboard}>\r\n            <img src={copyIcon} alt=\"Copy\" className=\"copy-icon\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <button onClick={handleBookmark}>\r\n        {isBookmarked ? 'Unbookmark' : 'Bookmark'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionAndCodeBlock;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
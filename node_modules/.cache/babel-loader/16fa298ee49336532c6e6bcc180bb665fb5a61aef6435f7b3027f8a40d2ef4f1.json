{"ast":null,"code":"var _jsxFileName = \"E:\\\\website\\\\coding-interview-questions\\\\src\\\\components\\\\UserDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport QuestionAndCodeBlock from './QuestionAndCodeBlock';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserDashboard = () => {\n  _s();\n  const [bookmarkedQuestions, setBookmarkedQuestions] = useState([]);\n  useEffect(() => {\n    const fetchBookmarkedQuestions = async () => {\n      try {\n        var _response$data;\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5208/api/bookmarks/user', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const bookmarkedQuestionIds = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data) || [];\n        if (bookmarkedQuestionIds.length > 0) {\n          const questionsResponse = await axios.get('http://localhost:5208/api/questions', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const questions = questionsResponse.data.filter(q => bookmarkedQuestionIds.includes(q.id));\n          setBookmarkedQuestions(questions);\n        }\n      } catch (error) {\n        console.error('Error fetching bookmarked questions:', error);\n      }\n    };\n    fetchBookmarkedQuestions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Bookmarked Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), bookmarkedQuestions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No bookmarked questions available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : bookmarkedQuestions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: question.questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(QuestionAndCodeBlock, {\n        questionId: question.id,\n        code: question.codeSnippet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, question.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(UserDashboard, \"d32rATL6AIkwjwUOLpM1Gu/cwms=\");\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["React","useState","useEffect","QuestionAndCodeBlock","axios","jsxDEV","_jsxDEV","UserDashboard","_s","bookmarkedQuestions","setBookmarkedQuestions","fetchBookmarkedQuestions","_response$data","token","localStorage","getItem","response","get","headers","Authorization","bookmarkedQuestionIds","data","length","questionsResponse","questions","filter","q","includes","id","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","question","questionText","questionId","code","codeSnippet","_c","$RefreshReg$"],"sources":["E:/website/coding-interview-questions/src/components/UserDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport QuestionAndCodeBlock from './QuestionAndCodeBlock';\r\nimport axios from 'axios';\r\n\r\nconst UserDashboard = () => {\r\n  const [bookmarkedQuestions, setBookmarkedQuestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchBookmarkedQuestions = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const response = await axios.get('http://localhost:5208/api/bookmarks/user', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        const bookmarkedQuestionIds = response.data?.data || [];\r\n\r\n        if (bookmarkedQuestionIds.length > 0) {\r\n          const questionsResponse = await axios.get('http://localhost:5208/api/questions', {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          });\r\n\r\n          const questions = questionsResponse.data.filter((q) =>\r\n            bookmarkedQuestionIds.includes(q.id)\r\n          );\r\n          setBookmarkedQuestions(questions);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching bookmarked questions:', error);\r\n      }\r\n    };\r\n\r\n    fetchBookmarkedQuestions();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"user-dashboard\">\r\n      <h2>Your Bookmarked Questions</h2>\r\n      {bookmarkedQuestions.length === 0 ? (\r\n        <p>No bookmarked questions available.</p>\r\n      ) : (\r\n        bookmarkedQuestions.map((question) => (\r\n          <div key={question.id}>\r\n            <h3>{question.questionText}</h3>\r\n            <QuestionAndCodeBlock questionId={question.id} code={question.codeSnippet} />\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAElEC,SAAS,CAAC,MAAM;IACd,MAAMS,wBAAwB,GAAG,MAAAA,CAAA,KAAY;MAC3C,IAAI;QAAA,IAAAC,cAAA;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,0CAA0C,EAAE;UAC3EC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,KAAK;UAChC;QACF,CAAC,CAAC;QAEF,MAAMO,qBAAqB,GAAG,EAAAR,cAAA,GAAAI,QAAQ,CAACK,IAAI,cAAAT,cAAA,uBAAbA,cAAA,CAAeS,IAAI,KAAI,EAAE;QAEvD,IAAID,qBAAqB,CAACE,MAAM,GAAG,CAAC,EAAE;UACpC,MAAMC,iBAAiB,GAAG,MAAMnB,KAAK,CAACa,GAAG,CAAC,qCAAqC,EAAE;YAC/EC,OAAO,EAAE;cACPC,aAAa,EAAE,UAAUN,KAAK;YAChC;UACF,CAAC,CAAC;UAEF,MAAMW,SAAS,GAAGD,iBAAiB,CAACF,IAAI,CAACI,MAAM,CAAEC,CAAC,IAChDN,qBAAqB,CAACO,QAAQ,CAACD,CAAC,CAACE,EAAE,CACrC,CAAC;UACDlB,sBAAsB,CAACc,SAAS,CAAC;QACnC;MACF,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IAEDlB,wBAAwB,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKyB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B1B,OAAA;MAAA0B,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjC3B,mBAAmB,CAACa,MAAM,KAAK,CAAC,gBAC/BhB,OAAA;MAAA0B,QAAA,EAAG;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAEzC3B,mBAAmB,CAAC4B,GAAG,CAAEC,QAAQ,iBAC/BhC,OAAA;MAAA0B,QAAA,gBACE1B,OAAA;QAAA0B,QAAA,EAAKM,QAAQ,CAACC;MAAY;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChC9B,OAAA,CAACH,oBAAoB;QAACqC,UAAU,EAAEF,QAAQ,CAACV,EAAG;QAACa,IAAI,EAAEH,QAAQ,CAACI;MAAY;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAFrEE,QAAQ,CAACV,EAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGhB,CACN,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAlDID,aAAa;AAAAoC,EAAA,GAAbpC,aAAa;AAoDnB,eAAeA,aAAa;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
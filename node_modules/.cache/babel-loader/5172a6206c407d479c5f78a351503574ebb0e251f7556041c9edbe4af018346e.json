{"ast":null,"code":"var _jsxFileName = \"E:\\\\website\\\\coding-interview-questions\\\\src\\\\components\\\\QuestionAndCodeBlock.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport copyIcon from '../assets/copy-icon-size_24.png';\nimport bookmarkService from './bookmarkService.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionAndCodeBlock = ({\n  questionId,\n  code\n}) => {\n  _s();\n  const [isBookmarked, setIsBookmarked] = useState(false);\n  const [showPopup, setShowPopup] = useState(null); // For showing the popup/alert\n  const hasFetchedBookmarks = useRef(false); // To prevent re-fetching unnecessarily\n\n  useEffect(() => {\n    const fetchBookmarkStatus = async () => {\n      try {\n        if (!hasFetchedBookmarks.current) {\n          const bookmarks = await bookmarkService.getBookmarks(localStorage.getItem('token'));\n          setIsBookmarked(bookmarks.includes(questionId));\n          hasFetchedBookmarks.current = true; // Prevents further fetches\n        }\n      } catch (error) {\n        console.error('Error checking bookmark status:', error);\n      }\n    };\n    fetchBookmarkStatus();\n  }, [questionId]);\n  const handleBookmark = async () => {\n    try {\n      if (isBookmarked) {\n        await bookmarkService.removeBookmark({\n          questionId\n        });\n        setIsBookmarked(false);\n        showConfirmation(\"Bookmark removed successfully!\"); // Show success message\n      } else {\n        const response = await bookmarkService.addBookmark({\n          questionId\n        });\n        if (response) {\n          setIsBookmarked(true);\n          showConfirmation(\"Question bookmarked successfully!\"); // Show success message\n        }\n      }\n    } catch (error) {\n      console.error(\"Error during bookmarking:\", error);\n      showConfirmation(\"An error occurred while bookmarking the question.\");\n    }\n  };\n  const copyToClipboard = () => {\n    if (code) {\n      navigator.clipboard.writeText(code);\n      showConfirmation('Code copied to clipboard!'); // Show success message for copying\n    } else {\n      showConfirmation('No code available to copy!');\n    }\n  };\n  const showConfirmation = message => {\n    setShowPopup(message);\n    setTimeout(() => setShowPopup(null), 2000); // Remove the popup after 2 seconds\n  };\n  const formatCodeWithComments = code => {\n    if (!code) return '';\n    const commentRegex = /(\\/\\/.*$)/gm;\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-and-code-block\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-block-container slide-in\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-block fade-in\",\n        children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            dangerouslySetInnerHTML: {\n              __html: formatCodeWithComments(code)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"copy-button\",\n          onClick: copyToClipboard,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: copyIcon,\n            alt: \"Copy\",\n            className: \"copy-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBookmark,\n      children: isBookmarked ? 'Unbookmark' : 'Bookmark'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: showPopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionAndCodeBlock, \"EwUnMaxvKsA106Hk0mSACiR0dps=\");\n_c = QuestionAndCodeBlock;\nexport default QuestionAndCodeBlock;\nvar _c;\n$RefreshReg$(_c, \"QuestionAndCodeBlock\");","map":{"version":3,"names":["React","useState","useEffect","useRef","copyIcon","bookmarkService","jsxDEV","_jsxDEV","QuestionAndCodeBlock","questionId","code","_s","isBookmarked","setIsBookmarked","showPopup","setShowPopup","hasFetchedBookmarks","fetchBookmarkStatus","current","bookmarks","getBookmarks","localStorage","getItem","includes","error","console","handleBookmark","removeBookmark","showConfirmation","response","addBookmark","copyToClipboard","navigator","clipboard","writeText","message","setTimeout","formatCodeWithComments","commentRegex","replace","className","children","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["E:/website/coding-interview-questions/src/components/QuestionAndCodeBlock.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport copyIcon from '../assets/copy-icon-size_24.png';\r\nimport bookmarkService from './bookmarkService.js';\r\n\r\nconst QuestionAndCodeBlock = ({ questionId, code }) => {\r\n  const [isBookmarked, setIsBookmarked] = useState(false);\r\n  const [showPopup, setShowPopup] = useState(null);  // For showing the popup/alert\r\n  const hasFetchedBookmarks = useRef(false); // To prevent re-fetching unnecessarily\r\n\r\n  useEffect(() => {\r\n    const fetchBookmarkStatus = async () => {\r\n      try {\r\n        if (!hasFetchedBookmarks.current) {\r\n          const bookmarks = await bookmarkService.getBookmarks(localStorage.getItem('token'));\r\n          setIsBookmarked(bookmarks.includes(questionId));\r\n          hasFetchedBookmarks.current = true; // Prevents further fetches\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking bookmark status:', error);\r\n      }\r\n    };\r\n\r\n    fetchBookmarkStatus();\r\n  }, [questionId]);\r\n\r\n  const handleBookmark = async () => {\r\n    try {\r\n      if (isBookmarked) {\r\n        await bookmarkService.removeBookmark({ questionId });\r\n        setIsBookmarked(false);\r\n        showConfirmation(\"Bookmark removed successfully!\");  // Show success message\r\n      } else {\r\n        const response = await bookmarkService.addBookmark({ questionId });\r\n        if (response) {\r\n          setIsBookmarked(true);\r\n          showConfirmation(\"Question bookmarked successfully!\");  // Show success message\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during bookmarking:\", error);\r\n      showConfirmation(\"An error occurred while bookmarking the question.\");\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = () => {\r\n    if (code) {\r\n      navigator.clipboard.writeText(code);\r\n      showConfirmation('Code copied to clipboard!');  // Show success message for copying\r\n    } else {\r\n      showConfirmation('No code available to copy!');\r\n    }\r\n  };\r\n\r\n  const showConfirmation = (message) => {\r\n    setShowPopup(message);\r\n    setTimeout(() => setShowPopup(null), 2000);  // Remove the popup after 2 seconds\r\n  };\r\n\r\n  const formatCodeWithComments = (code) => {\r\n    if (!code) return '';\r\n    const commentRegex = /(\\/\\/.*$)/gm;\r\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-and-code-block\">\r\n      <div className=\"code-block-container slide-in\">\r\n        <div className=\"code-block fade-in\">\r\n          <pre>\r\n            <code dangerouslySetInnerHTML={{ __html: formatCodeWithComments(code) }} />\r\n          </pre>\r\n          <button className=\"copy-button\" onClick={copyToClipboard}>\r\n            <img src={copyIcon} alt=\"Copy\" className=\"copy-icon\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <button onClick={handleBookmark}>\r\n        {isBookmarked ? 'Unbookmark' : 'Bookmark'}\r\n      </button>\r\n      {/* Show popup confirmation */}\r\n      {showPopup && <div className=\"popup\">{showPopup}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionAndCodeBlock;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"export const questionsData = [{\n  question: \"1. Write a code to reverse a number-\",\n  code: `import java.util.Scanner;\n      \n      public class ReverseNumber {\n          public static void main(String[] args) {\n              // Create a scanner object to take input from the user\n              Scanner sc = new Scanner(System.in);\n      \n              // Ask the user to enter a number\n              System.out.print(\"Enter a number: \");\n              int number = sc.nextInt();  // Read the number from the user\n      \n              // Variable to store the reversed number\n              int reverse = 0;\n      \n              // Loop to reverse the digits of the number\n              while (number != 0) {\n                  // Extract the last digit\n                  reverse = reverse * 10 + number % 10;\n                  // Remove the last digit\n                  number /= 10;\n              }\n      \n              // Print the reversed number\n              System.out.println(\"Reversed number: \" + reverse);\n              sc.close();  // Close the scanner\n          }\n        }`\n}, {\n  question: \"2. Write the code to find the Fibonacci series up to the nth term.\",\n  code: `import java.util.Scanner;\n      \n      public class FibonacciSeries {\n          public static void main(String[] args) {\n              // Create a scanner object to take input from the user\n              Scanner sc = new Scanner(System.in);\n      \n              // Ask the user for the number of terms\n              System.out.print(\"Enter the number of terms: \");\n              int n = sc.nextInt();  // Read the number of terms\n      \n              // Initialize the first two numbers of the Fibonacci series\n              int first = 0, second = 1;\n      \n              // Print the Fibonacci series\n              System.out.print(\"Fibonacci Series: \" + first + \" \" + second);\n      \n              // Generate and print the rest of the Fibonacci series\n              for (int i = 3; i <= n; i++) {\n                  int next = first + second;  // Calculate the next number\n                  System.out.print(\" \" + next);  // Print the next number\n                  first = second;  // Update the first number\n                  second = next;  // Update the second number\n              }\n      \n              sc.close();  // Close the scanner\n          }\n        }`\n}, {\n  question: \"3. Write code for Greatest Common Divisor (GCD).\",\n  code: `import java.util.Scanner;\n      \n      public class GCD {\n          public static void main(String[] args) {\n              // Create a scanner object to take input from the user\n              Scanner sc = new Scanner(System.in);\n      \n              // Ask the user to enter two numbers\n              System.out.print(\"Enter first number: \");\n              int num1 = sc.nextInt();\n              System.out.print(\"Enter second number: \");\n              int num2 = sc.nextInt();\n      \n              // Calculate GCD using the Euclidean algorithm\n              while (num2 != 0) {\n                  int temp = num2;\n                  num2 = num1 % num2;\n                  num1 = temp;\n              }\n      \n              // Print the GCD\n              System.out.println(\"Greatest Common Divisor: \" + num1);\n              sc.close();  // Close the scanner\n          }\n        }`\n}, {\n  question: \"4. Write code for Perfect Number.\",\n  code: `import java.util.Scanner;\n      \n      public class PerfectNumber {\n          public static void main(String[] args) {\n              // Create a scanner object to take input from the user\n              Scanner sc = new Scanner(System.in);\n      \n              // Ask the user to enter a number\n              System.out.print(\"Enter a number: \");\n              int number = sc.nextInt();\n      \n              int sum = 0;  // Variable to store the sum of divisors\n      \n              // Find all divisors and calculate their sum\n              for (int i = 1; i < number; i++) {\n                  if (number % i == 0) {\n                      sum += i;\n                  }\n              }\n      \n              // Check if the sum of divisors equals the number\n              if (sum == number) {\n                  System.out.println(number + \" is a Perfect Number.\");\n              } else {\n                  System.out.println(number + \" is not a Perfect Number.\");\n              }\n      \n              sc.close();  // Close the scanner\n          }\n        }`\n}, {\n  question: \"5. Write code to check if two strings are Anagram or not.\",\n  code: `import java.util.Arrays;\n      import java.util.Scanner;\n      \n      public class AnagramCheck {\n          public static void main(String[] args) {\n              // Create a scanner object to take input from the user\n              Scanner sc = new Scanner(System.in);\n      \n              // Ask the user to enter two strings\n              System.out.print(\"Enter the first string: \");\n              String str1 = sc.nextLine();\n              System.out.print(\"Enter the second string: \");\n              String str2 = sc.nextLine();\n      \n              // Check if lengths are equal\n              if (str1.length() == str2.length()) {\n                  // Convert strings to char arrays and sort them\n                  char[] charArray1 = str1.toCharArray();\n                  char[] charArray2 = str2.toCharArray();\n                  Arrays.sort(charArray1);\n                  Arrays.sort(charArray2);\n      \n                  // Compare sorted char arrays\n                  if (Arrays.equals(charArray1, charArray2)) {\n                      System.out.println(\"The strings are anagrams.\");\n                  } else {\n                      System.out.println(\"The strings are not anagrams.\");\n                  }\n              } else {\n                  System.out.println(\"The strings are not anagrams.\");\n              }\n      \n              sc.close();  // Close the scanner\n          }\n        }`\n}, {\n  question: \"6. Write code to check if the given string is Palindrome or not.\",\n  code: `import java.util.Scanner;\n      \n      public class PalindromeCheck {\n          public static void main(String[] args) {\n              // Create a scanner object to take input from the user\n              Scanner sc = new Scanner(System.in);\n      \n              // Ask the user to enter a string\n              System.out.print(\"Enter a string: \");\n              String str = sc.nextLine();\n      \n              // Reverse the string\n              String reversedStr = new StringBuilder(str).reverse().toString();\n      \n              // Check if the original string is equal to the reversed string\n              if (str.equals(reversedStr)) {\n                  System.out.println(\"The string is a palindrome.\");\n              } else {\n                  System.out.println(\"The string is not a palindrome.\");\n              }\n      \n              sc.close();  // Close the scanner\n          }\n        }`\n}, {\n  question: \"7. Write code to calculate the frequency of characters in a string.\",\n  code: `import java.util.HashMap;\n      import java.util.Scanner;\n      \n      public class CharacterFrequency {\n          public static void main(String[] args) {\n              // Create a scanner object to take input from the user\n              Scanner sc = new Scanner(System.in);\n      \n              // Ask the user to enter a string\n              System.out.print(\"Enter a string: \");\n              String str = sc.nextLine();\n      \n              // Create a HashMap to store the frequency of characters\n              HashMap<Character, Integer> frequencyMap = new HashMap<>();\n      \n              // Iterate through the string and calculate the frequency of each character\n              for (char c : str.toCharArray()) {\n                  frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);\n              }\n      \n              // Print the frequency of each character\n              System.out.println(\"Character frequencies:\");\n              for (char c : frequencyMap.keySet()) {\n                  System.out.println(c + \": \" + frequencyMap.get(c));\n              }\n      \n              sc.close();  // Close the scanner\n         }\n        }`\n}, {\n  question: \"8. Write code to check if two strings match where one string contains wildcard characters.\",\n  code: `import java.util.Scanner;\n\npublic class WildcardMatch {\n    public static boolean isMatch(String s, String p) {\n        int sLen = s.length();\n        int pLen = p.length();\n        boolean[][] dp = new boolean[sLen + 1][pLen + 1];\n\n        // Base case: empty string matches with empty pattern\n        dp[0][0] = true;\n\n        // Handle patterns with '*' at the beginning\n        for (int j = 1; j <= pLen; j++) {\n            if (p.charAt(j - 1) == '*') {\n                dp[0][j] = dp[0][j - 1];\n            }\n        }\n\n        // Fill the dp table for matching\n        for (int i = 1; i <= sLen; i++) {\n            for (int j = 1; j <= pLen; j++) {\n                if (p.charAt(j - 1) == '?' || p.charAt(j - 1) == s.charAt(i - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else if (p.charAt(j - 1) == '*') {\n                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];  // '*' matches any sequence\n                }\n            }\n        }\n\n        // Return whether the entire strings match\n        return dp[sLen][pLen];\n    }\n\n    public static void main(String[] args) {\n        // Create a scanner object to take input from the user\n        Scanner sc = new Scanner(System.in);\n\n        // Ask the user to enter two strings\n        System.out.print(\"Enter the first string: \");\n        String str1 = sc.nextLine();\n        System.out.print(\"Enter the pattern (with wildcards ? and *): \");\n        String pattern = sc.nextLine();\n\n        // Check if the strings match\n        boolean result = isMatch(str1, pattern);\n        System.out.println(\"Do the strings match? \" + result);\n\n        sc.close();  // Close the scanner\n   }\n        }`\n}, {\n  question: \"9. Write code for bubble sort.\",\n  code: `import java.util.Scanner;\n\npublic class BubbleSort {\n    public static void main(String[] args) {\n        // Create a scanner object to take input from the user\n        Scanner sc = new Scanner(System.in);\n\n        // Ask the user to enter the number of elements in the array\n        System.out.print(\"Enter the number of elements: \");\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n\n        // Ask the user to input the elements of the array\n        System.out.println(\"Enter the elements of the array:\");\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n\n        // Perform Bubble Sort\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - 1 - i; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    // Swap arr[j] and arr[j + 1]\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n\n        // Print the sorted array\n        System.out.println(\"Sorted array:\");\n        for (int i = 0; i < n; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n\n        sc.close();  // Close the scanner\n    }\n  }`\n}, {\n  question: \"10. How is the merge sort algorithm implemented?\",\n  code: `import java.util.Arrays;\n\npublic class MergeSort {\n    // Function to merge two halves of the array\n    public static void merge(int[] arr, int left, int mid, int right) {\n        // Find sizes of two subarrays to be merged\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n\n        // Create temporary arrays\n        int[] leftArray = new int[n1];\n        int[] rightArray = new int[n2];\n\n        // Copy data to temporary arrays\n        for (int i = 0; i < n1; i++) {\n            leftArray[i] = arr[left + i];\n        }\n        for (int j = 0; j < n2; j++) {\n            rightArray[j] = arr[mid + 1 + j];\n        }\n\n        // Merge the temporary arrays back into the original array\n        int i = 0, j = 0;\n        int k = left;\n        while (i < n1 && j < n2) {\n            if (leftArray[i] <= rightArray[j]) {\n                arr[k] = leftArray[i];\n                i++;\n            } else {\n                arr[k] = rightArray[j];\n                j++;\n            }\n            k++;\n        }\n\n        // Copy remaining elements of leftArray[], if any\n        while (i < n1) {\n            arr[k] = leftArray[i];\n            i++;\n            k++;\n        }\n\n        // Copy remaining elements of rightArray[], if any\n        while (j < n2) {\n            arr[k] = rightArray[j];\n            j++;\n            k++;\n        }\n    }\n\n    // Function to perform merge sort on an array\n    public static void mergeSort(int[] arr, int left, int right) {\n        if (left < right) {\n            // Find the middle point\n            int mid = left + (right - left) / 2;\n\n            // Sort first and second halves\n            mergeSort(arr, left, mid);\n            mergeSort(arr, mid + 1, right);\n\n            // Merge the sorted halves\n            merge(arr, left, mid, right);\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {12, 11, 13, 5, 6, 7};\n\n        // Print the original array\n        System.out.println(\"Original array: \" + Arrays.toString(arr));\n\n        // Perform merge sort on the array\n        mergeSort(arr, 0, arr.length - 1);\n\n        // Print the sorted array\n        System.out.println(\"Sorted array: \" + Arrays.toString(arr));\n    }\n  }`\n}];","map":{"version":3,"names":["questionsData","question","code"],"sources":["E:/website/coding-interview-questions/src/data/questionsData.js"],"sourcesContent":["export const questionsData = [\r\n    {\r\n        question: \"1. Write a code to reverse a number-\",\r\n        code: `import java.util.Scanner;\r\n      \r\n      public class ReverseNumber {\r\n          public static void main(String[] args) {\r\n              // Create a scanner object to take input from the user\r\n              Scanner sc = new Scanner(System.in);\r\n      \r\n              // Ask the user to enter a number\r\n              System.out.print(\"Enter a number: \");\r\n              int number = sc.nextInt();  // Read the number from the user\r\n      \r\n              // Variable to store the reversed number\r\n              int reverse = 0;\r\n      \r\n              // Loop to reverse the digits of the number\r\n              while (number != 0) {\r\n                  // Extract the last digit\r\n                  reverse = reverse * 10 + number % 10;\r\n                  // Remove the last digit\r\n                  number /= 10;\r\n              }\r\n      \r\n              // Print the reversed number\r\n              System.out.println(\"Reversed number: \" + reverse);\r\n              sc.close();  // Close the scanner\r\n          }\r\n        }`\r\n      },\r\n      {\r\n        question: \"2. Write the code to find the Fibonacci series up to the nth term.\",\r\n        code: `import java.util.Scanner;\r\n      \r\n      public class FibonacciSeries {\r\n          public static void main(String[] args) {\r\n              // Create a scanner object to take input from the user\r\n              Scanner sc = new Scanner(System.in);\r\n      \r\n              // Ask the user for the number of terms\r\n              System.out.print(\"Enter the number of terms: \");\r\n              int n = sc.nextInt();  // Read the number of terms\r\n      \r\n              // Initialize the first two numbers of the Fibonacci series\r\n              int first = 0, second = 1;\r\n      \r\n              // Print the Fibonacci series\r\n              System.out.print(\"Fibonacci Series: \" + first + \" \" + second);\r\n      \r\n              // Generate and print the rest of the Fibonacci series\r\n              for (int i = 3; i <= n; i++) {\r\n                  int next = first + second;  // Calculate the next number\r\n                  System.out.print(\" \" + next);  // Print the next number\r\n                  first = second;  // Update the first number\r\n                  second = next;  // Update the second number\r\n              }\r\n      \r\n              sc.close();  // Close the scanner\r\n          }\r\n        }`\r\n      },\r\n      {\r\n        question: \"3. Write code for Greatest Common Divisor (GCD).\",\r\n        code: `import java.util.Scanner;\r\n      \r\n      public class GCD {\r\n          public static void main(String[] args) {\r\n              // Create a scanner object to take input from the user\r\n              Scanner sc = new Scanner(System.in);\r\n      \r\n              // Ask the user to enter two numbers\r\n              System.out.print(\"Enter first number: \");\r\n              int num1 = sc.nextInt();\r\n              System.out.print(\"Enter second number: \");\r\n              int num2 = sc.nextInt();\r\n      \r\n              // Calculate GCD using the Euclidean algorithm\r\n              while (num2 != 0) {\r\n                  int temp = num2;\r\n                  num2 = num1 % num2;\r\n                  num1 = temp;\r\n              }\r\n      \r\n              // Print the GCD\r\n              System.out.println(\"Greatest Common Divisor: \" + num1);\r\n              sc.close();  // Close the scanner\r\n          }\r\n        }`\r\n      },\r\n      {\r\n        question: \"4. Write code for Perfect Number.\",\r\n        code: `import java.util.Scanner;\r\n      \r\n      public class PerfectNumber {\r\n          public static void main(String[] args) {\r\n              // Create a scanner object to take input from the user\r\n              Scanner sc = new Scanner(System.in);\r\n      \r\n              // Ask the user to enter a number\r\n              System.out.print(\"Enter a number: \");\r\n              int number = sc.nextInt();\r\n      \r\n              int sum = 0;  // Variable to store the sum of divisors\r\n      \r\n              // Find all divisors and calculate their sum\r\n              for (int i = 1; i < number; i++) {\r\n                  if (number % i == 0) {\r\n                      sum += i;\r\n                  }\r\n              }\r\n      \r\n              // Check if the sum of divisors equals the number\r\n              if (sum == number) {\r\n                  System.out.println(number + \" is a Perfect Number.\");\r\n              } else {\r\n                  System.out.println(number + \" is not a Perfect Number.\");\r\n              }\r\n      \r\n              sc.close();  // Close the scanner\r\n          }\r\n        }`\r\n      },\r\n      {\r\n        question: \"5. Write code to check if two strings are Anagram or not.\",\r\n        code: `import java.util.Arrays;\r\n      import java.util.Scanner;\r\n      \r\n      public class AnagramCheck {\r\n          public static void main(String[] args) {\r\n              // Create a scanner object to take input from the user\r\n              Scanner sc = new Scanner(System.in);\r\n      \r\n              // Ask the user to enter two strings\r\n              System.out.print(\"Enter the first string: \");\r\n              String str1 = sc.nextLine();\r\n              System.out.print(\"Enter the second string: \");\r\n              String str2 = sc.nextLine();\r\n      \r\n              // Check if lengths are equal\r\n              if (str1.length() == str2.length()) {\r\n                  // Convert strings to char arrays and sort them\r\n                  char[] charArray1 = str1.toCharArray();\r\n                  char[] charArray2 = str2.toCharArray();\r\n                  Arrays.sort(charArray1);\r\n                  Arrays.sort(charArray2);\r\n      \r\n                  // Compare sorted char arrays\r\n                  if (Arrays.equals(charArray1, charArray2)) {\r\n                      System.out.println(\"The strings are anagrams.\");\r\n                  } else {\r\n                      System.out.println(\"The strings are not anagrams.\");\r\n                  }\r\n              } else {\r\n                  System.out.println(\"The strings are not anagrams.\");\r\n              }\r\n      \r\n              sc.close();  // Close the scanner\r\n          }\r\n        }`\r\n      },\r\n      {\r\n        question: \"6. Write code to check if the given string is Palindrome or not.\",\r\n        code: `import java.util.Scanner;\r\n      \r\n      public class PalindromeCheck {\r\n          public static void main(String[] args) {\r\n              // Create a scanner object to take input from the user\r\n              Scanner sc = new Scanner(System.in);\r\n      \r\n              // Ask the user to enter a string\r\n              System.out.print(\"Enter a string: \");\r\n              String str = sc.nextLine();\r\n      \r\n              // Reverse the string\r\n              String reversedStr = new StringBuilder(str).reverse().toString();\r\n      \r\n              // Check if the original string is equal to the reversed string\r\n              if (str.equals(reversedStr)) {\r\n                  System.out.println(\"The string is a palindrome.\");\r\n              } else {\r\n                  System.out.println(\"The string is not a palindrome.\");\r\n              }\r\n      \r\n              sc.close();  // Close the scanner\r\n          }\r\n        }`\r\n      },\r\n      {\r\n        question: \"7. Write code to calculate the frequency of characters in a string.\",\r\n        code: `import java.util.HashMap;\r\n      import java.util.Scanner;\r\n      \r\n      public class CharacterFrequency {\r\n          public static void main(String[] args) {\r\n              // Create a scanner object to take input from the user\r\n              Scanner sc = new Scanner(System.in);\r\n      \r\n              // Ask the user to enter a string\r\n              System.out.print(\"Enter a string: \");\r\n              String str = sc.nextLine();\r\n      \r\n              // Create a HashMap to store the frequency of characters\r\n              HashMap<Character, Integer> frequencyMap = new HashMap<>();\r\n      \r\n              // Iterate through the string and calculate the frequency of each character\r\n              for (char c : str.toCharArray()) {\r\n                  frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);\r\n              }\r\n      \r\n              // Print the frequency of each character\r\n              System.out.println(\"Character frequencies:\");\r\n              for (char c : frequencyMap.keySet()) {\r\n                  System.out.println(c + \": \" + frequencyMap.get(c));\r\n              }\r\n      \r\n              sc.close();  // Close the scanner\r\n         }\r\n        }`\r\n      },\r\n      {\r\n  question: \"8. Write code to check if two strings match where one string contains wildcard characters.\",\r\n  code: `import java.util.Scanner;\r\n\r\npublic class WildcardMatch {\r\n    public static boolean isMatch(String s, String p) {\r\n        int sLen = s.length();\r\n        int pLen = p.length();\r\n        boolean[][] dp = new boolean[sLen + 1][pLen + 1];\r\n\r\n        // Base case: empty string matches with empty pattern\r\n        dp[0][0] = true;\r\n\r\n        // Handle patterns with '*' at the beginning\r\n        for (int j = 1; j <= pLen; j++) {\r\n            if (p.charAt(j - 1) == '*') {\r\n                dp[0][j] = dp[0][j - 1];\r\n            }\r\n        }\r\n\r\n        // Fill the dp table for matching\r\n        for (int i = 1; i <= sLen; i++) {\r\n            for (int j = 1; j <= pLen; j++) {\r\n                if (p.charAt(j - 1) == '?' || p.charAt(j - 1) == s.charAt(i - 1)) {\r\n                    dp[i][j] = dp[i - 1][j - 1];\r\n                } else if (p.charAt(j - 1) == '*') {\r\n                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];  // '*' matches any sequence\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return whether the entire strings match\r\n        return dp[sLen][pLen];\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        // Create a scanner object to take input from the user\r\n        Scanner sc = new Scanner(System.in);\r\n\r\n        // Ask the user to enter two strings\r\n        System.out.print(\"Enter the first string: \");\r\n        String str1 = sc.nextLine();\r\n        System.out.print(\"Enter the pattern (with wildcards ? and *): \");\r\n        String pattern = sc.nextLine();\r\n\r\n        // Check if the strings match\r\n        boolean result = isMatch(str1, pattern);\r\n        System.out.println(\"Do the strings match? \" + result);\r\n\r\n        sc.close();  // Close the scanner\r\n   }\r\n        }`\r\n      },\r\n      {\r\n  question: \"9. Write code for bubble sort.\",\r\n  code: `import java.util.Scanner;\r\n\r\npublic class BubbleSort {\r\n    public static void main(String[] args) {\r\n        // Create a scanner object to take input from the user\r\n        Scanner sc = new Scanner(System.in);\r\n\r\n        // Ask the user to enter the number of elements in the array\r\n        System.out.print(\"Enter the number of elements: \");\r\n        int n = sc.nextInt();\r\n        int[] arr = new int[n];\r\n\r\n        // Ask the user to input the elements of the array\r\n        System.out.println(\"Enter the elements of the array:\");\r\n        for (int i = 0; i < n; i++) {\r\n            arr[i] = sc.nextInt();\r\n        }\r\n\r\n        // Perform Bubble Sort\r\n        for (int i = 0; i < n - 1; i++) {\r\n            for (int j = 0; j < n - 1 - i; j++) {\r\n                if (arr[j] > arr[j + 1]) {\r\n                    // Swap arr[j] and arr[j + 1]\r\n                    int temp = arr[j];\r\n                    arr[j] = arr[j + 1];\r\n                    arr[j + 1] = temp;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Print the sorted array\r\n        System.out.println(\"Sorted array:\");\r\n        for (int i = 0; i < n; i++) {\r\n            System.out.print(arr[i] + \" \");\r\n        }\r\n\r\n        sc.close();  // Close the scanner\r\n    }\r\n  }`\r\n},\r\n{\r\n  question: \"10. How is the merge sort algorithm implemented?\",\r\n  code: `import java.util.Arrays;\r\n\r\npublic class MergeSort {\r\n    // Function to merge two halves of the array\r\n    public static void merge(int[] arr, int left, int mid, int right) {\r\n        // Find sizes of two subarrays to be merged\r\n        int n1 = mid - left + 1;\r\n        int n2 = right - mid;\r\n\r\n        // Create temporary arrays\r\n        int[] leftArray = new int[n1];\r\n        int[] rightArray = new int[n2];\r\n\r\n        // Copy data to temporary arrays\r\n        for (int i = 0; i < n1; i++) {\r\n            leftArray[i] = arr[left + i];\r\n        }\r\n        for (int j = 0; j < n2; j++) {\r\n            rightArray[j] = arr[mid + 1 + j];\r\n        }\r\n\r\n        // Merge the temporary arrays back into the original array\r\n        int i = 0, j = 0;\r\n        int k = left;\r\n        while (i < n1 && j < n2) {\r\n            if (leftArray[i] <= rightArray[j]) {\r\n                arr[k] = leftArray[i];\r\n                i++;\r\n            } else {\r\n                arr[k] = rightArray[j];\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        // Copy remaining elements of leftArray[], if any\r\n        while (i < n1) {\r\n            arr[k] = leftArray[i];\r\n            i++;\r\n            k++;\r\n        }\r\n\r\n        // Copy remaining elements of rightArray[], if any\r\n        while (j < n2) {\r\n            arr[k] = rightArray[j];\r\n            j++;\r\n            k++;\r\n        }\r\n    }\r\n\r\n    // Function to perform merge sort on an array\r\n    public static void mergeSort(int[] arr, int left, int right) {\r\n        if (left < right) {\r\n            // Find the middle point\r\n            int mid = left + (right - left) / 2;\r\n\r\n            // Sort first and second halves\r\n            mergeSort(arr, left, mid);\r\n            mergeSort(arr, mid + 1, right);\r\n\r\n            // Merge the sorted halves\r\n            merge(arr, left, mid, right);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[] arr = {12, 11, 13, 5, 6, 7};\r\n\r\n        // Print the original array\r\n        System.out.println(\"Original array: \" + Arrays.toString(arr));\r\n\r\n        // Perform merge sort on the array\r\n        mergeSort(arr, 0, arr.length - 1);\r\n\r\n        // Print the sorted array\r\n        System.out.println(\"Sorted array: \" + Arrays.toString(arr));\r\n    }\r\n  }`\r\n}\r\n\r\n      \r\n  ];\r\n  "],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CACzB;EACIC,QAAQ,EAAE,sCAAsC;EAChDC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,CAAC,EACD;EACED,QAAQ,EAAE,oEAAoE;EAC9EC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,CAAC,EACD;EACED,QAAQ,EAAE,kDAAkD;EAC5DC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,CAAC,EACD;EACED,QAAQ,EAAE,mCAAmC;EAC7CC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,CAAC,EACD;EACED,QAAQ,EAAE,2DAA2D;EACrEC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,CAAC,EACD;EACED,QAAQ,EAAE,kEAAkE;EAC5EC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,CAAC,EACD;EACED,QAAQ,EAAE,qEAAqE;EAC/EC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,CAAC,EACD;EACJD,QAAQ,EAAE,4FAA4F;EACtGC,IAAI,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM,CAAC,EACD;EACJD,QAAQ,EAAE,gCAAgC;EAC1CC,IAAI,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EACD;EACED,QAAQ,EAAE,kDAAkD;EAC5DC,IAAI,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAGE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\n\n// Function to get bookmarks for a user\nexport const getBookmarks = async userId => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.error('No token found in localStorage');\n    return;\n  }\n  try {\n    const response = await axios.get(`http://localhost:5208/api/bookmarks/${userId}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching bookmarks:', error);\n    throw error;\n  }\n};\n\n// Function to add a bookmark\nexport const addBookmark = async bookmarkRequest => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.error('No token found in localStorage');\n    return;\n  }\n  try {\n    const response = await axios.post('http://localhost:5208/api/bookmarks/add', bookmarkRequest, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error adding bookmark:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getBookmarks","userId","token","localStorage","getItem","console","error","response","get","headers","data","addBookmark","bookmarkRequest","post"],"sources":["E:/website/coding-interview-questions/src/components/bookmarkApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Function to get bookmarks for a user\r\nexport const getBookmarks = async (userId) => {\r\n  const token = localStorage.getItem('token');\r\n\r\n  if (!token) {\r\n    console.error('No token found in localStorage');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get(`http://localhost:5208/api/bookmarks/${userId}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching bookmarks:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to add a bookmark\r\nexport const addBookmark = async (bookmarkRequest) => {\r\n  const token = localStorage.getItem('token');\r\n\r\n  if (!token) {\r\n    console.error('No token found in localStorage');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await axios.post('http://localhost:5208/api/bookmarks/add', bookmarkRequest, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error adding bookmark:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,MAAM,IAAK;EAC5C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI,CAACF,KAAK,EAAE;IACVG,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;IAC/C;EACF;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,uCAAuCP,MAAM,EAAE,EAAE;MAChFQ,OAAO,EAAE;QACP,eAAe,EAAE,UAAUP,KAAK;MAClC;IACF,CAAC,CAAC;IACF,OAAOK,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,WAAW,GAAG,MAAOC,eAAe,IAAK;EACpD,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI,CAACF,KAAK,EAAE;IACVG,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;IAC/C;EACF;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACc,IAAI,CAAC,yCAAyC,EAAED,eAAe,EAAE;MAC5FH,OAAO,EAAE;QACP,eAAe,EAAE,UAAUP,KAAK,EAAE;QAClC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOK,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
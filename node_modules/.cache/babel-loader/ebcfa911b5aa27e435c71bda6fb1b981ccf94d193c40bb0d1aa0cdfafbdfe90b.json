{"ast":null,"code":"var _jsxFileName = \"E:\\\\website\\\\coding-interview-questions\\\\src\\\\components\\\\CodeBlock.js\";\nimport React from 'react';\nimport '../styles/CodeBlock.css';\nimport copyIcon from '../assets/copy-icon-size_24.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeBlock = ({\n  code\n}) => {\n  // Function to copy the code to clipboard\n  const copyToClipboard = () => {\n    if (code) {\n      navigator.clipboard.writeText(code);\n      alert('Code copied to clipboard!');\n    } else {\n      alert('No code available to copy!');\n    }\n  };\n\n  // Function to wrap comments in a span with a specific class for styling\n  const formatCodeWithComments = code => {\n    if (!code) return ''; // Return an empty string if code is undefined or null\n\n    // Regular expression to find comment lines starting with //\n    const commentRegex = /(\\/\\/.*$)/gm;\n\n    // Replace comments with HTML formatted span tags\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code-block-container slide-in\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-block fade-in\",\n      children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          dangerouslySetInnerHTML: {\n            __html: formatCodeWithComments(code)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"copy-button\",\n        onClick: copyToClipboard,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: copyIcon,\n          alt: \"Copy\",\n          className: \"copy-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_c = CodeBlock;\nexport default CodeBlock;\nvar _c;\n$RefreshReg$(_c, \"CodeBlock\");","map":{"version":3,"names":["React","copyIcon","jsxDEV","_jsxDEV","CodeBlock","code","copyToClipboard","navigator","clipboard","writeText","alert","formatCodeWithComments","commentRegex","replace","className","children","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["E:/website/coding-interview-questions/src/components/CodeBlock.js"],"sourcesContent":["import React from 'react';\r\nimport '../styles/CodeBlock.css';\r\nimport copyIcon from '../assets/copy-icon-size_24.png'; \r\n\r\nconst CodeBlock = ({ code }) => {\r\n  // Function to copy the code to clipboard\r\n  const copyToClipboard = () => {\r\n    if (code) {\r\n      navigator.clipboard.writeText(code);\r\n      alert('Code copied to clipboard!');\r\n    } else {\r\n      alert('No code available to copy!');\r\n    }\r\n  };\r\n\r\n  // Function to wrap comments in a span with a specific class for styling\r\n  const formatCodeWithComments = (code) => {\r\n    if (!code) return '';  // Return an empty string if code is undefined or null\r\n    \r\n    // Regular expression to find comment lines starting with //\r\n    const commentRegex = /(\\/\\/.*$)/gm;\r\n    \r\n    // Replace comments with HTML formatted span tags\r\n    return code.replace(commentRegex, '<span class=\"comment-line\">$1</span>');\r\n  };\r\n\r\n  return (\r\n    <div className=\"code-block-container slide-in\">\r\n      <div className=\"code-block fade-in\">\r\n        <pre>\r\n          {/* Use dangerouslySetInnerHTML to render the code with HTML formatting */}\r\n          <code dangerouslySetInnerHTML={{ __html: formatCodeWithComments(code) }} />\r\n        </pre>\r\n        <button className=\"copy-button\" onClick={copyToClipboard}>\r\n          <img src={copyIcon} alt=\"Copy\" className=\"copy-icon\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeBlock;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,yBAAyB;AAChC,OAAOC,QAAQ,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC9B;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAID,IAAI,EAAE;MACRE,SAAS,CAACC,SAAS,CAACC,SAAS,CAACJ,IAAI,CAAC;MACnCK,KAAK,CAAC,2BAA2B,CAAC;IACpC,CAAC,MAAM;MACLA,KAAK,CAAC,4BAA4B,CAAC;IACrC;EACF,CAAC;;EAED;EACA,MAAMC,sBAAsB,GAAIN,IAAI,IAAK;IACvC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE,CAAC,CAAE;;IAEvB;IACA,MAAMO,YAAY,GAAG,aAAa;;IAElC;IACA,OAAOP,IAAI,CAACQ,OAAO,CAACD,YAAY,EAAE,sCAAsC,CAAC;EAC3E,CAAC;EAED,oBACET,OAAA;IAAKW,SAAS,EAAC,+BAA+B;IAAAC,QAAA,eAC5CZ,OAAA;MAAKW,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBACjCZ,OAAA;QAAAY,QAAA,eAEEZ,OAAA;UAAMa,uBAAuB,EAAE;YAAEC,MAAM,EAAEN,sBAAsB,CAACN,IAAI;UAAE;QAAE;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxE,CAAC,eACNlB,OAAA;QAAQW,SAAS,EAAC,aAAa;QAACQ,OAAO,EAAEhB,eAAgB;QAAAS,QAAA,eACvDZ,OAAA;UAAKoB,GAAG,EAAEtB,QAAS;UAACuB,GAAG,EAAC,MAAM;UAACV,SAAS,EAAC;QAAW;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACI,EAAA,GAnCIrB,SAAS;AAqCf,eAAeA,SAAS;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}